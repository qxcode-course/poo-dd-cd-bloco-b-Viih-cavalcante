{
    "patches": [
        {
            "label": "2025-10-11_21-58-28",
            "content": "@@ -1,8 +1,26 @@\n+@@ -1,54 +0,0 @@%0A-\n class re\n@@ -26,17 +26,19 @@\n elogio :\n-%0A\n+%250A\n     def \n@@ -53,17 +53,19 @@\n (self) :\n-%0A\n+%250A\n         \n@@ -73,84 +73,5 @@\n elf.\n-_hora = int%0A        self._minuto = int%0A        self._segundos = int%0A%0A    def get\n+%0A\n",
            "lines": "2"
        },
        {
            "label": "2025-10-12_00-26-12",
            "content": "@@ -3,13 +3,15 @@\n ass \n-Watch\n+relogio\n  :%0A \n",
            "lines": "7"
        },
        {
            "label": "2025-10-12_12-21-41",
            "content": "@@ -52,19 +52,16 @@\n ._ho\n-ur :int = 0\n+ra = int\n %0A   \n@@ -78,24 +78,21 @@\n _minuto \n-:\n+= \n int\n- = 0\n %0A       \n@@ -109,161 +109,24 @@\n undo\n- :int = 0%0A%0A    def mostrar(self) -%3E None:%0A        print(self)%0A%0A%0A    def __srt__(self):%0A        return f%22%7Bself._hora:2d%7D:%7Bself._minuto:2d%7D:%7Bself._segundo%7D%7D%22%0A%0A\n+s = int%0A%0A    def get\n",
            "lines": "7"
        },
        {
            "label": "2025-10-12_12-45-01",
            "content": "@@ -48,18 +48,18 @@\n self._ho\n+u\n r\n-a\n  :int = \n@@ -268,17 +268,8 @@\n ndo%7D\n+%7D\n %22%0A\n-def main():\n+%0A\n",
            "lines": "13"
        },
        {
            "label": "2025-10-12_12-45-39",
            "content": "@@ -281,85 +281,4 @@\n n():\n-%0A    relogio = Watch (0,0,0)%0A    while True:%0A        line :str = input()%0A        \n",
            "lines": "13"
        },
        {
            "label": "2025-10-13_21-18-53",
            "content": "@@ -362,255 +362,4 @@\n     \n-print(%22$ + line%22)%0A        args : list %5Bstr%5D = line.split(%22%22)%0A        cmd =  args%5B0%5D%0A        if cmd == %22end%22 :%0A            break%0A        elif cmd == %22show%22:%0A            print(mostrar)%0A            relogio.mostrar()%0A%0Aif __name__ == __main__ :%0A    main()%0A\n",
            "lines": "17"
        },
        {
            "label": "2025-10-13_22-16-28",
            "content": "@@ -305,12 +305,10 @@\n  (0,\n- \n 0,\n- \n 0)%0A \n@@ -514,16 +514,43 @@\n %22show%22:%0A\n+            print(mostrar)%0A\n         \n@@ -591,17 +591,16 @@\n  == \n-%22\n __main__\n %22 :%0A\n@@ -595,17 +595,16 @@\n __main__\n-%22\n  :%0A    m\n",
            "lines": "27"
        },
        {
            "label": "2025-10-13_22-19-21",
            "content": "@@ -299,16 +299,23 @@\n  Watch (\n+0, 0, 0\n )%0A    wh\n@@ -372,16 +372,16 @@\n t(%22$\n-%22\n  + line\n+%22\n )%0A  \n@@ -418,17 +418,16 @@\n .split(%22\n- \n %22)%0A     \n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_22-30-00",
            "content": "@@ -58,20 +58,17 @@\n  :int = \n-hora\n+0\n %0A       \n@@ -88,22 +88,17 @@\n  :int = \n-minuto\n+0\n %0A       \n@@ -119,23 +119,17 @@\n  :int = \n-segundo\n+0\n %0A%0A    de\n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_22-41-49",
            "content": "@@ -32,47 +32,10 @@\n self\n-, hora: int, minuto: int, segundo: int\n )\n+ \n :%0A  \n@@ -317,15 +317,8 @@\n ch (\n-0, 0, 0\n )%0A  \n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_22-54-16",
            "content": "@@ -237,18 +237,18 @@\n  def __s\n-t\n r\n+t\n __(self)\n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_22-57-23",
            "content": "@@ -251,14 +251,8 @@\n elf)\n--%3E str\n :%0A  \n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_22-59-50",
            "content": "@@ -320,19 +320,16 @@\n _segundo\n-:2d\n %7D%22%0Adef m\n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_23-00-09",
            "content": "@@ -284,17 +284,16 @@\n f._hora:\n-0\n 2d%7D:%7Bsel\n@@ -302,17 +302,16 @@\n _minuto:\n-0\n 2d%7D:%7Bsel\n@@ -321,17 +321,16 @@\n segundo:\n-0\n 2d%7D%22%0Adef\n",
            "lines": "26"
        },
        {
            "label": "2025-10-13_23-01-07",
            "content": "@@ -67,24 +67,16 @@\n do: int)\n- -%3E None\n :%0A      \n@@ -614,168 +614,8 @@\n r()%0A\n-        elif cmd == %22set%22:%0A        hora = int(args%5B1%5D)%0A        minuto = int(args%5B2%5D)%0A        segundo = int(args%5B3%5D)%0A        relogio.set(hora, minuto, segundo)%0A%0A\n %0Aif \n",
            "lines": "26"
        },
        {
            "label": "2025-10-20_15-58-21",
            "content": "@@ -653,20 +653,16 @@\n         \n-    \n hora = i\n@@ -673,20 +673,16 @@\n rgs%5B1%5D)%0A\n-    \n         \n@@ -711,20 +711,16 @@\n         \n-    \n segundo \n@@ -734,20 +734,16 @@\n rgs%5B3%5D)%0A\n-    \n         \n",
            "lines": "32"
        },
        {
            "label": "2025-10-20_15-59-08",
            "content": "@@ -300,437 +300,48 @@\n 02d%7D\n-%22%7Bself._minuto:02d%7D %7Bself._minuto:02d%7D%22%22%0A        return f%22%7Bself._hora:02d%7D:%7Bself._minuto:02d%7D:%7Bself._segundo:02d%7D%22%0A    def set(self,hora :int, minuto :int, segundo :int) -%3E None: %0A        if isinstance(hora, int) and 0 %3C= hora %3C= 23:%0A            self_.hora = hora%0A        else:%0A           print(%22fail:hora invalida%22)%0A        if isinstance(minuto, int) and 0 %3C= minuto %3C= 59;%0A            self_.minuto = minuto%0A            else    \n+:%7Bself._minuto:02d%7D:%7Bself._segundo:02d%7D%22\n %0Adef\n@@ -379,17 +379,16 @@\n , 0, 0)%0A\n-%0A\n     whil\n@@ -488,16 +488,19 @@\n e.split(\n+%22 %22\n )%0A      \n@@ -516,17 +516,16 @@\n args%5B0%5D%0A\n-%0A\n         \n@@ -560,17 +560,16 @@\n   break%0A\n-%0A\n         \n@@ -588,16 +588,16 @@\n %22show%22:%0A\n+\n         \n@@ -618,17 +618,16 @@\n strar()%0A\n-%0A\n         \n",
            "lines": "32"
        },
        {
            "label": "2025-10-20_16-21-50",
            "content": "@@ -300,40 +300,115 @@\n 02d%7D\n-:%7Bself._minuto:02d%7D:%7Bself._minut\n+%22%7Bself._minuto:02d%7D %7Bself._minuto:02d%7D%22%22%0A        return f%22%7Bself._hora:02d%7D:%7Bself._minuto:02d%7D:%7Bself._segund\n o:02\n@@ -504,17 +504,16 @@\n e(hora, \n-:\n int) and\n@@ -542,26 +542,26 @@\n         self\n-.\n _\n+.\n hora = hora%0A\n@@ -669,18 +669,22 @@\n to %3C= 59\n-:%0A\n+;%0A    \n         \n@@ -683,26 +683,26 @@\n         self\n-.\n _\n+.\n minuto = min\n",
            "lines": "45"
        },
        {
            "label": "2025-10-20_16-48-33",
            "content": "@@ -349,31 +349,30 @@\n ef set(self,\n- \n hora\n-:\n  \n+:\n int, minuto:\n@@ -362,34 +362,34 @@\n ora :int, minuto\n-:\n  \n+:\n int, segundo: in\n@@ -376,34 +376,34 @@\n to :int, segundo\n-:\n  \n+:\n int) -%3E None:%0A  \n@@ -391,32 +391,33 @@\n o :int) -%3E None:\n+ \n %0A        if 0 %3C=\n@@ -408,24 +408,51 @@\n %0A        if \n+isinstance(hora, :int) and \n 0 %3C= hora %3C=\n@@ -503,33 +503,32 @@\n lse:%0A           \n- \n print(%22fail: hor\n@@ -523,17 +523,16 @@\n t(%22fail:\n- \n hora inv\n@@ -554,140 +554,46 @@\n  if \n-0 %3C= minuto %3C= 59:%0A            self._minuto = minuto%0A        else:%0A            print(%22fail: \n+isinstance(\n minuto\n+,\n  in\n-valido%22)%0A        if 0 %3C= segund\n+t) and 0 %3C= minut\n o %3C=\n@@ -609,94 +609,50 @@\n     \n-    \n self._\n-segundo = segundo%0A        else:%0A            print(%22fail: segundo invalido%22)%0A\n+minuto = minuto%0A            else    \n %0Adef\n",
            "lines": "44"
        },
        {
            "label": "2025-10-20_17-01-18",
            "content": "@@ -323,22 +323,21 @@\n :%7Bself._\n-segund\n+minut\n o:02d%7D%22%0A\n",
            "lines": "50"
        },
        {
            "label": "2025-10-20_22-24-32",
            "content": "@@ -765,259 +765,8 @@\n o%22)%0A\n-    def nextSecond(self) -%3E None :%0A      if  self._segundo == 60:%0A        self._segundo = 0%0A        self._minuto += 1%0A      if self._minuto == 60:%0A          self._minuto = 0%0A          self._hora += 1%0A      if self._hora == 24:%0A          self._hora = 0\n %0Adef\n@@ -825,25 +825,8 @@\n ue:%0A\n-        try:%0A    \n     \n@@ -853,123 +853,8 @@\n t()%0A\n-        except EOFError:%0A            break%0A        line = line.strip()%0A        if line == %22%22:%0A            continue%0A\n     \n",
            "lines": "50"
        },
        {
            "label": "2025-10-20_22-39-38",
            "content": "@@ -1101,18 +1101,14 @@\n     \n-raw_\n line\n-:\n  \n+:\n str \n@@ -1164,35 +1164,8 @@\n eak%0A\n-        print(%22$%22 + line)%0A%0A\n     \n@@ -1179,12 +1179,8 @@\n e = \n-raw_\n line\n@@ -1232,16 +1232,41 @@\n ontinue%0A\n+        print(%22$%22 + line)\n %0A       \n",
            "lines": "64"
        },
        {
            "label": "2025-10-20_22-55-12",
            "content": "@@ -1184,20 +1184,16 @@\n t(%22$%22 + \n-raw_\n line)%0A%0A \n",
            "lines": "66"
        },
        {
            "label": "2025-10-20_22-55-27",
            "content": "@@ -1472,81 +1472,8 @@\n t%22:%0A\n-            if len(args) %3C 4:%0A                continue%0A            try:%0A \n     \n@@ -1512,17 +1512,16 @@\n         \n- \n minuto =\n@@ -1534,17 +1534,16 @@\n rgs%5B2%5D)%0A\n- \n         \n@@ -1585,455 +1585,43 @@\n     \n-except ValueError :%0A                continue%0A            relogio.set(hora, minuto, segundo)%0A        elif cmd == %22next%22:%0A            relogio.nextSecond()%0A        elif cmd == %22init%22:%0A            relogio = Watch(0, 0, 0)%0A            if len(args) %3C 4:%0A                continue%0A            try:%0A                h = int(args%5B1%5D); m = int(args%5B2%5D); s = int(args%5B3%5D)%0A            except ValueError:%0A                continue%0A            relogio.set(h, m, s)\n+relogio.set(hora, minuto, segundo)%0A\n %0A%0Aif\n",
            "lines": "66"
        },
        {
            "label": "2025-10-20_23-11-11",
            "content": "@@ -800,32 +800,8 @@\n e :%0A\n-      self._segundo +=1%0A\n     \n",
            "lines": "81"
        },
        {
            "label": "2025-10-20_23-14-40",
            "content": "class Watch :\n    def __init__(self, hora: int, minuto: int, segundo: int) -> None:\n        self._hora :int = hora\n        self._minuto :int = minuto\n        self._segundo :int = segundo\n\n    def mostrar(self) -> None:\n        print(self)\n\n\n    def __str__(self)-> str:\n        return f\"{self._hora:02d}:{self._minuto:02d}:{self._segundo:02d}\"\n    def set(self, hora: int, minuto: int, segundo: int) -> None:\n        if 0 <= hora <= 23:\n            self._hora = hora\n        else:\n            print(\"fail: hora invalida\")\n        if 0 <= minuto <= 59:\n            self._minuto = minuto\n        else:\n            print(\"fail: minuto invalido\")\n        if 0 <= segundo <= 59:\n            self._segundo = segundo\n        else:\n            print(\"fail: segundo invalido\")\n    def nextSecond(self) -> None :\n      self._segundo +=1\n      if  self._segundo == 60:\n        self._segundo = 0\n        self._minuto += 1\n      if self._minuto == 60:\n          self._minuto = 0\n          self._hora += 1\n      if self._hora == 24:\n          self._hora = 0\ndef main():\n    relogio = Watch (0, 0, 0)\n\n    while True:\n        try:\n            raw_line: str = input()\n        except EOFError:\n            break\n        print(\"$\" + raw_line)\n\n        line = raw_line.strip()\n        if line == \"\":\n            continue\n\n        args : list [str] = line.split()\n        cmd =  args[0]\n\n        if cmd == \"end\" :\n            break\n\n        elif cmd == \"show\":\n            relogio.mostrar()\n\n        elif cmd == \"set\":\n            if len(args) < 4:\n                continue\n            try:\n             hora = int(args[1])\n             minuto = int(args[2])\n             segundo = int(args[3])\n            except ValueError :\n                continue\n            relogio.set(hora, minuto, segundo)\n        elif cmd == \"next\":\n            relogio.nextSecond()\n        elif cmd == \"init\":\n            relogio = Watch(0, 0, 0)\n            if len(args) < 4:\n                continue\n            try:\n                h = int(args[1]); m = int(args[2]); s = int(args[3])\n            except ValueError:\n                continue\n            relogio.set(h, m, s)\n\nif __name__ == \"__main__\" :\n    main()\n",
            "lines": "82"
        }
    ]
}