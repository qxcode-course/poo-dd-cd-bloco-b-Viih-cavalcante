{
    "patches": [
        {
            "label": "2025-10-20_22-20-44",
            "content": "@@ -1,1813 +0,0 @@\n-class Notebook:%0A    def __init__(self):%0A        self._ligado: bool = False%0A    def getLigado(self) -%3E bool:%0A            return self._ligado%0A    def setLigado(self, valor: bool) -%3E None:%0A        self._ligado = valor%0A    def ligar(self) -%3E None:%0A         if not self._ligado:%0A              self._ligado = True%0A              print(%22notebook ligado%22)%0A         else:%0A              print(%22ja est%C3%A1 ligado%22)%0A    def desligar(self) -%3E None:%0A         if self._ligado:%0A              self._ligado = False%0A              print(%22notebook desligado%22)%0A         else:%0A              print(%22ja esta desligado%22)%0A    def mostrar(self) -%3E None:%0A        status = %22ligado%22 if self._ligado else %22desligado%22%0A        print(f%22status: %7Bstatus%7D%22)%0A    def usar(self, tempo:int) -%3E None:%0A         if not self._ligado:%0A              print(%22erro: ligue o notebook primeiro%22)%0A              return%0A         print(f%22Usando por %7Btempo%7D minutos%22)%0Adef main():%0A     notebook = Notebook()%0A     while True:%0A        try:%0A            line: str = input()%0A        except EOFError:%0A            break%0A        print(%22$%22 + line)%0A        args = line.strip().split()%0A        if len(args) == 0:%0A             continue%0A        cmd = args%5B0%5D.lower()%0A        if cmd == %22end%22:%0A             break%0A        elif cmd == %22show%22 or cmd == %22mostrar%22:%0A             notebook.mostrar()%0A        elif cmd == %22ligar%22:%0A            notebook.ligar()%0A        elif cmd == %22usar%22:%0A             if len(args) %3C 2:%0A                print(%22uso: usar %3C minutos%3E%22)%0A                continue%0A             try:%0A                  minutos = int(args%5B1%5D)%0A             except ValueError:%0A                  print(%22minuto deve ser um n%C3%BAmero inteiro%22)%0A                  continue%0A             notebook.usar(minutos)%0A        else:%0A            print(%22comando desconhecido%22)%0Aif __name__ == %22__main__%22:%0A     main()\n",
            "lines": "0"
        },
        {
            "label": "2025-10-25_01-01-12",
            "content": "@@ -690,24 +690,22 @@\n print(f%22\n-notebook\n+status\n : %7Bstatu\n",
            "lines": "59"
        },
        {
            "label": "2025-10-25_01-03-48",
            "content": "@@ -690,17 +690,17 @@\n print(f%22\n-N\n+n\n otebook:\n",
            "lines": "59"
        },
        {
            "label": "2025-10-25_01-04-06",
            "content": "@@ -72,69 +72,8 @@\n lse%0A\n-        self._bateria = None%0A        self._carregador = None%0A\n     \n@@ -253,109 +253,96 @@\n  if \n+not \n self._\n-bateria is None and self._carregador is None:%0A              print(%22fail: nao foi possivel\n+ligado:%0A              self._ligado = True%0A              print(%22notebook\n  liga\n-e\n+do\n %22)%0A \n@@ -373,57 +373,22 @@\n     \n-self._ligado = True%0A              print(%22notebook\n+print(%22ja est%C3%A1\n  lig\n",
            "lines": "59"
        },
        {
            "label": "2025-10-25_01-08-33",
            "content": "@@ -129,17 +129,16 @@\n  = None%0A\n-%0A\n     def \n@@ -166,24 +166,28 @@\n ol:%0A        \n+    \n return self.\n@@ -194,17 +194,16 @@\n _ligado%0A\n-%0A\n     def \n@@ -269,17 +269,16 @@\n = valor%0A\n-%0A\n     def \n@@ -298,32 +298,33 @@\n %3E None:%0A        \n+ \n if self._bateria\n@@ -370,24 +370,26 @@\n             \n+  \n print(%22fail:\n@@ -394,9 +394,9 @@\n l: n\n-%C3%A3\n+a\n o fo\n@@ -405,17 +405,17 @@\n poss\n-%C3%AD\n+i\n vel liga\n r%22)%0A\n@@ -414,12 +414,13 @@\n liga\n-r\n+e\n %22)%0A\n+ \n     \n@@ -433,32 +433,34 @@\n se:%0A            \n+  \n self._ligado = T\n@@ -463,16 +463,18 @@\n  = True%0A\n+  \n         \n@@ -494,33 +494,32 @@\n tebook ligado%22)%0A\n-%0A\n     def desligar\n@@ -534,32 +534,33 @@\n %3E None:%0A        \n+ \n if self._ligado:\n@@ -552,32 +552,34 @@\n f self._ligado:%0A\n+  \n             self\n@@ -587,32 +587,34 @@\n _ligado = False%0A\n+  \n             prin\n@@ -637,38 +637,41 @@\n igado%22)%0A        \n+ \n else:%0A\n+  \n             prin\n@@ -678,14 +678,14 @@\n t(%22j\n-%C3%A1\n+a\n  est\n-%C3%A1\n+a\n  des\n@@ -693,17 +693,16 @@\n igado%22)%0A\n-%0A\n     def \n@@ -820,17 +820,16 @@\n atus%7D%22)%0A\n-%0A\n     def \n@@ -845,17 +845,16 @@\n , tempo:\n- \n int) -%3E \n@@ -867,16 +867,17 @@\n         \n+ \n if not s\n@@ -881,32 +881,34 @@\n t self._ligado:%0A\n+  \n             prin\n@@ -940,24 +940,26 @@\n  primeiro%22)%0A\n+  \n             \n@@ -965,32 +965,33 @@\n  return%0A        \n+ \n print(f%22Usando p\n@@ -1011,18 +1011,16 @@\n nutos%22)%0A\n-%0A%0A\n def main\n@@ -1023,24 +1023,25 @@\n main():%0A    \n+ \n notebook = N\n@@ -1050,16 +1050,17 @@\n ebook()%0A\n+ \n     whil\n@@ -1193,142 +1193,27 @@\n     \n-line_norm = line.strip()%0A        if line_norm.startswith(%22$%22):%0A            line_norm = line_norm%5B1:%5D.lstrip()%0A        args = line_norm\n+args = line.strip()\n .spl\n@@ -1248,32 +1248,33 @@\n  0:%0A            \n+ \n continue%0A       \n@@ -1325,32 +1325,33 @@\n d%22:%0A            \n+ \n break%0A        el\n@@ -1392,32 +1392,33 @@\n r%22:%0A            \n+ \n notebook.mostrar\n@@ -1482,72 +1482,8 @@\n r()%0A\n-        elif cmd == %22desligar%22:%0A            notebook.desligar()%0A\n     \n@@ -1502,24 +1502,25 @@\n  == %22usar%22:%0A\n+ \n             \n@@ -1571,16 +1571,17 @@\n : usar %3C\n+ \n minutos%3E\n@@ -1600,32 +1600,33 @@\n        continue%0A\n+ \n             try:\n@@ -1642,16 +1642,18 @@\n         \n+  \n minutos \n@@ -1675,24 +1675,25 @@\n             \n+ \n except Value\n@@ -1695,24 +1695,26 @@\n ValueError:%0A\n+  \n             \n@@ -1730,17 +1730,16 @@\n (%22minuto\n-s\n  deve se\n@@ -1768,32 +1768,34 @@\n                 \n+  \n continue%0A       \n@@ -1779,32 +1779,33 @@\n        continue%0A\n+ \n             note\n@@ -1906,16 +1906,17 @@\n ain__%22:%0A\n+ \n     main\n",
            "lines": "61"
        },
        {
            "label": "2025-10-25_01-12-48",
            "content": "@@ -125,24 +125,25 @@\n ador = None%0A\n+%0A\n     def getL\n@@ -191,16 +191,17 @@\n _ligado%0A\n+%0A\n     def \n@@ -267,16 +267,17 @@\n = valor%0A\n+%0A\n     def \n@@ -485,32 +485,33 @@\n tebook ligado%22)%0A\n+%0A\n     def desligar\n@@ -673,24 +673,25 @@\n desligado%22)%0A\n+%0A\n     def most\n@@ -805,16 +805,17 @@\n atus%7D%22)%0A\n+%0A\n     def \n@@ -992,16 +992,18 @@\n nutos%22)%0A\n+%0A%0A\n def main\n@@ -1455,19 +1455,27 @@\n cmd \n-in (\n+== \n %22show%22\n-,\n+ or cmd ==\n  %22mo\n@@ -1480,17 +1480,16 @@\n mostrar%22\n-)\n :%0A      \n",
            "lines": "74"
        },
        {
            "label": "2025-10-25_02-50-35",
            "content": "@@ -3,15 +3,16 @@\n ass \n-Bateria\n+Notebook\n :%0A  \n@@ -34,28 +34,45 @@\n self\n-, capacidade: int) :\n+):%0A        self._ligado: bool = False\n %0A   \n@@ -86,30 +86,21 @@\n lf._\n-capacidade = capacidad\n+bateria = Non\n e%0A  \n@@ -118,22 +118,21 @@\n _car\n-ga = capacidad\n+regador = Non\n e%0A  \n@@ -140,26 +140,22 @@\n  def get\n-capacidade\n+Ligado\n (self) -\n@@ -152,27 +152,28 @@\n do(self) -%3E \n-int\n+bool\n :%0A        re\n@@ -183,26 +183,22 @@\n n self._\n-capacidade\n+ligado\n %0A    def\n@@ -202,43 +202,44 @@\n def \n-consumir(self, minutos: int\n+setLigado(self, valor: bool\n ) -%3E \n-int\n+None\n :%0A  \n@@ -248,91 +248,253 @@\n     \n-usado = min(minutos, self._carga)%0A        self._carga -= usado%0A        return us\n+self._ligado = valor%0A    def ligar(self) -%3E None:%0A        if self._bateria is None and self._carregador is None:%0A            print(%22fail: n%C3%A3o foi poss%C3%ADvel ligar%22)%0A        else:%0A            self._ligado = True%0A            print(%22notebook lig\n ado\n+%22)\n %0A   \n@@ -502,21 +502,21 @@\n def \n-carre\n+desli\n gar(self\n , mi\n@@ -515,36 +515,8 @@\n self\n-, minutos :int,potencia: int\n ) -%3E\n@@ -534,321 +534,1522 @@\n     \n+if \n self._\n-carga = min (self._capacidade, self._carga + minutos * potencia)%0A    def mostrar(self) -%3E None:%0A        print(f%22%7Bself._carga%7D/%7Bself._capacidade%7D%22)%0Aclass Carregador:%0A    def __init__(self,potencia: int):%0A        self._potencia = potencia%0Aclass Notebook:%0A    def __init__(self):%0A        self._ligado = Falseself._\n+ligado:%0A            self._ligado = False%0A            print(%22notebook desligado%22)%0A        else:%0A            print(%22j%C3%A1 est%C3%A1 desligado%22)%0A    def mostrar(self) -%3E None:%0A        status = %22ligado%22 if self._ligado else %22desligado%22%0A        print(f%22Notebook: %7Bstatus%7D%22)%0A    def usar(self, tempo: int) -%3E None:%0A        if not self._ligado:%0A            print(%22erro: ligue o notebook primeiro%22)%0A            return%0A        print(f%22Usando por %7Btempo%7D minutos%22)%0Adef main():%0A    notebook = Notebook()%0A    while True:%0A        try:%0A            line: str = input()%0A        except EOFError:%0A            break%0A        print(%22$%22 + line)%0A        line_norm = line.strip()%0A        if line_norm.startswith(%22$%22):%0A            line_norm = line_norm%5B1:%5D.lstrip()%0A        args = line_norm.split()%0A        if len(args) == 0:%0A            continue%0A        cmd = args%5B0%5D.lower()%0A        if cmd == %22end%22:%0A            break%0A        elif cmd in (%22show%22, %22mostrar%22):%0A            notebook.mostrar()%0A        elif cmd == %22ligar%22:%0A            notebook.ligar()%0A        elif cmd == %22desligar%22:%0A            notebook.desligar()%0A        elif cmd == %22usar%22:%0A            if len(args) %3C 2:%0A                print(%22uso: usar %3Cminutos%3E%22)%0A                continue%0A            try:%0A                minutos = int(args%5B1%5D)%0A            except ValueError:%0A                print(%22minutos deve ser um n%C3%BAmero inteiro%22)%0A                continue%0A            notebook.usar(minutos)%0A        else:%0A            print(%22comando desconhecido%22)%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "66"
        },
        {
            "label": "2025-10-25_03-12-06",
            "content": "class Bateria:\n    def __init__(self, capacidade: int) :\n        self._capacidade = capacidade\n        self._carga = capacidade\n    def getcapacidade(self) -> int:\n        return self._capacidade\n    def consumir(self, minutos: int) -> int:\n        usado = min(minutos, self._carga)\n        self._carga -= usado\n        return usado\n    def carregar(self, minutos :int,potencia: int) -> None:\n        self._carga = min (self._capacidade, self._carga + minutos * potencia)\n    def mostrar(self) -> None:\n        print(f\"{self._carga}/{self._capacidade}\")\nclass Carregador:\n    def __init__(self,potencia: int):\n        self._potencia = potencia\nclass Notebook:\n    def __init__(self):\n        self._ligado = Falseself._",
            "lines": "20"
        }
    ]
}